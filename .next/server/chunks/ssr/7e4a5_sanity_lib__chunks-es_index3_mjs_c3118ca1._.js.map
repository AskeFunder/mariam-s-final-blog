{"version":3,"sources":["turbopack:///[project]/Desktop/Vue/Ionic/mariam-s-final-blog/node_modules/sanity/src/structure/structureResolvers/PaneResolutionError.ts","turbopack:///[project]/Desktop/Vue/Ionic/mariam-s-final-blog/node_modules/sanity/src/structure/structureResolvers/assignId.ts","turbopack:///[project]/Desktop/Vue/Ionic/mariam-s-final-blog/node_modules/sanity/src/structure/structureResolvers/createPaneResolver.ts","turbopack:///[project]/Desktop/Vue/Ionic/mariam-s-final-blog/node_modules/sanity/src/structure/structureResolvers/memoBind.ts","turbopack:///[project]/Desktop/Vue/Ionic/mariam-s-final-blog/node_modules/sanity/src/structure/structureResolvers/resolveIntent.ts","turbopack:///[project]/Desktop/Vue/Ionic/mariam-s-final-blog/node_modules/sanity/src/structure/structureResolvers/createResolvedPaneNodeStream.ts","turbopack:///[project]/Desktop/Vue/Ionic/mariam-s-final-blog/node_modules/sanity/src/structure/structureResolvers/useResolvedPanes.ts","turbopack:///[project]/Desktop/Vue/Ionic/mariam-s-final-blog/node_modules/sanity/src/structure/components/structureTool/intentResolver/utils.ts","turbopack:///[project]/Desktop/Vue/Ionic/mariam-s-final-blog/node_modules/sanity/src/structure/components/structureTool/intentResolver/IntentResolver.tsx","turbopack:///[project]/Desktop/Vue/Ionic/mariam-s-final-blog/node_modules/sanity/src/structure/components/structureTool/StructureError.tsx","turbopack:///[project]/Desktop/Vue/Ionic/mariam-s-final-blog/node_modules/sanity/src/structure/components/structureTool/NoDocumentTypesScreen.tsx","turbopack:///[project]/Desktop/Vue/Ionic/mariam-s-final-blog/node_modules/sanity/src/structure/components/structureTool/StructureTitle.tsx","turbopack:///[project]/Desktop/Vue/Ionic/mariam-s-final-blog/node_modules/sanity/src/structure/components/structureTool/StructureTool.tsx","turbopack:///[project]/Desktop/Vue/Ionic/mariam-s-final-blog/node_modules/sanity/src/structure/components/structureTool/StructureToolBoundary.tsx"],"sourcesContent":["import {type RouterPaneSiblingContext} from '../types'\n\nexport interface PaneResolutionErrorOptions {\n  message: string\n  context?: RouterPaneSiblingContext\n  helpId?: string\n  cause?: Error\n}\n\n/**\n * An error thrown during pane resolving. This error is meant to be bubbled up\n * through react and handled in an error boundary. It includes a `cause`\n * property which is the original error caught\n */\nexport class PaneResolutionError extends Error {\n  cause: Error | undefined\n  context: RouterPaneSiblingContext | undefined\n  helpId: string | undefined\n\n  constructor({message, context, helpId, cause}: PaneResolutionErrorOptions) {\n    super(message)\n    this.name = 'PaneResolutionError'\n    this.context = context\n    this.helpId = helpId\n    this.cause = cause\n  }\n}\n","import {nanoid} from 'nanoid'\n\n// `WeakMap`s require the first type param to extend `object`\nconst randomIdCache = new WeakMap<object, string>()\n\n/**\n * given an object, this function randomly generates an ID and returns it. this\n * result is then saved in a WeakMap so subsequent requests for the same object\n * will receive the same ID\n */\nexport function assignId(obj: object): string {\n  const cachedValue = randomIdCache.get(obj)\n  if (cachedValue) return cachedValue\n\n  const id = nanoid()\n  randomIdCache.set(obj, id)\n  return id\n}\n","import {from, isObservable, type Observable, of as observableOf} from 'rxjs'\nimport {publishReplay, refCount, switchMap} from 'rxjs/operators'\nimport {isRecord} from 'sanity'\n\nimport {type PaneNode, type RouterPaneSiblingContext, type UnresolvedPaneNode} from '../types'\nimport {PaneResolutionError} from './PaneResolutionError'\n\ninterface Serializable {\n  serialize: (...args: never[]) => unknown\n}\n\nconst isPromise = (thing: any): thing is PromiseLike<unknown> => {\n  return !!thing && typeof thing?.then === 'function'\n}\nconst isSerializable = (thing: unknown): thing is Serializable => {\n  if (!isRecord(thing)) return false\n  return typeof thing.serialize === 'function'\n}\n\n/**\n * The signature of the function used to take an `UnresolvedPaneNode` and turn\n * it into an `Observable<PaneNode>`.\n */\nexport type PaneResolver = (\n  unresolvedPane: UnresolvedPaneNode | undefined,\n  context: RouterPaneSiblingContext,\n  flatIndex: number,\n) => Observable<PaneNode>\n\nexport type PaneResolverMiddleware = (paneResolveFn: PaneResolver) => PaneResolver\n\nconst rethrowWithPaneResolutionErrors: PaneResolverMiddleware =\n  (next) => (unresolvedPane, context, flatIndex) => {\n    try {\n      return next(unresolvedPane, context, flatIndex)\n    } catch (e) {\n      // re-throw errors that are already `PaneResolutionError`s\n      if (e instanceof PaneResolutionError) {\n        throw e\n      }\n\n      // anything else, wrap with `PaneResolutionError` and set the underlying\n      // error as a the `cause`\n      throw new PaneResolutionError({\n        message: typeof e?.message === 'string' ? e.message : '',\n        context,\n        cause: e,\n      })\n    }\n  }\n\nconst wrapWithPublishReplay: PaneResolverMiddleware =\n  (next) =>\n  (...args) => {\n    return next(...args).pipe(\n      // need to add publishReplay + refCount to ensure new subscribers always\n      // get an emission. without this, memoized observables may get stuck\n      // waiting for their first emissions resulting in a loading pane\n      publishReplay(1),\n      refCount(),\n    )\n  }\n\nexport function createPaneResolver(middleware: PaneResolverMiddleware): PaneResolver {\n  // note: this API includes a middleware/wrapper function because the function\n  // is recursive. we want to call the wrapped version of the function always\n  // (even inside of nested calls) so the identifier invoked for the recursion\n  // should be the wrapped version\n  const resolvePane = rethrowWithPaneResolutionErrors(\n    wrapWithPublishReplay(\n      middleware((unresolvedPane, context, flatIndex) => {\n        if (!unresolvedPane) {\n          throw new PaneResolutionError({\n            message: 'Pane returned no child',\n            context,\n            helpId: 'structure-item-returned-no-child',\n          })\n        }\n\n        if (isPromise(unresolvedPane) || isObservable(unresolvedPane)) {\n          return from(unresolvedPane).pipe(\n            switchMap((result) => resolvePane(result, context, flatIndex)),\n          )\n        }\n\n        if (isSerializable(unresolvedPane)) {\n          return resolvePane(unresolvedPane.serialize(context), context, flatIndex)\n        }\n\n        if (typeof unresolvedPane === 'function') {\n          return resolvePane(unresolvedPane(context.id, context), context, flatIndex)\n        }\n\n        return observableOf(unresolvedPane)\n      }),\n    ),\n  )\n\n  return resolvePane\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-function-type */\n\n// `WeakMap`s require the first type param to extend `object`\nconst bindCache = new WeakMap<object, Map<string, Function>>()\n\n/**\n * An alternative to `obj.method.bind(obj)` that utilizes a weakmap to return\n * the same memory reference for sequent binds.\n */\nexport function memoBind<\n  T extends object,\n  K extends keyof {[P in keyof T]: T[P] extends Function ? T[P] : never},\n>(obj: T, methodKey: K): T[K]\nexport function memoBind(obj: Record<string, unknown>, methodKey: string): Function {\n  const boundMethods = bindCache.get(obj) || new Map<string, Function>()\n  if (boundMethods) {\n    const bound = boundMethods.get(methodKey)\n    if (bound) return bound\n  }\n\n  const method = obj[methodKey]\n\n  if (typeof method !== 'function') {\n    throw new Error(\n      `Expected property \\`${methodKey}\\` to be a function but got ${typeof method} instead.`,\n    )\n  }\n\n  const bound = method.bind(obj)\n  boundMethods.set(methodKey, bound)\n  bindCache.set(obj, boundMethods)\n\n  return bound\n}\n","import {omit} from 'lodash'\nimport {firstValueFrom, type Observable} from 'rxjs'\n\nimport {type StructureContext} from '../structureBuilder'\nimport {\n  type PaneNode,\n  type RouterPanes,\n  type RouterPaneSiblingContext,\n  type UnresolvedPaneNode,\n} from '../types'\nimport {assignId} from './assignId'\nimport {createPaneResolver, type PaneResolverMiddleware} from './createPaneResolver'\nimport {memoBind} from './memoBind'\n\ninterface TraverseOptions {\n  unresolvedPane: UnresolvedPaneNode | undefined\n  intent: string\n  params: {type: string; id: string; [key: string]: string | undefined}\n  payload: unknown\n  parent: PaneNode | null\n  path: string[]\n  currentId: string\n  flatIndex: number\n  levelIndex: number\n  structureContext: StructureContext\n}\n\nexport interface ResolveIntentOptions {\n  rootPaneNode?: UnresolvedPaneNode\n  intent: string\n  params: {type: string; id: string; [key: string]: string | undefined}\n  payload: unknown\n  structureContext: StructureContext\n}\n\n/**\n * Resolves an intent request using breadth first search. If a match is not\n * found, the intent will resolve to the fallback editor.\n *\n * A match is found if:\n * 1. the `PaneNode` is of type `document` and the its ID matches the intent ID\n * 2. the `PaneNode` is of type `documentList` and the `schemaTypeName` matches\n * 3. the `PaneNode`'s `canHandleIntent` method returns true\n *\n * If a `PaneNode` of type `list` is found, it will be searched for a match.\n *\n * @see PaneNode\n */\nexport async function resolveIntent(options: ResolveIntentOptions): Promise<RouterPanes> {\n  const resolvedPaneCache = new Map<string, Observable<PaneNode>>()\n\n  // this is a simple version of the memoizer in `createResolvedPaneNodeStream`\n  const memoize: PaneResolverMiddleware = (nextFn) => (unresolvedPane, context, flatIndex) => {\n    const key = unresolvedPane && `${assignId(unresolvedPane)}-${context.path.join('__')}`\n    const cachedResolvedPane = key && resolvedPaneCache.get(key)\n    if (cachedResolvedPane) return cachedResolvedPane\n\n    const result = nextFn(unresolvedPane, context, flatIndex)\n    if (key) resolvedPaneCache.set(key, result)\n    return result\n  }\n\n  const resolvePane = createPaneResolver(memoize)\n\n  const fallbackEditorPanes: RouterPanes = [\n    [\n      {\n        id: `__edit__${options.params.id}`,\n        params: {...omit(options.params, ['id']), type: options.params.type},\n        payload: options.payload,\n      },\n    ],\n  ]\n\n  async function traverse({\n    currentId,\n    flatIndex,\n    intent,\n    params,\n    parent,\n    path,\n    payload,\n    unresolvedPane,\n    levelIndex,\n    structureContext,\n  }: TraverseOptions): Promise<\n    Array<{panes: RouterPanes; depthIndex: number; levelIndex: number}>\n  > {\n    if (!unresolvedPane) return []\n\n    const {id: targetId, type: schemaTypeName, ...otherParams} = params\n    const context: RouterPaneSiblingContext = {\n      id: currentId,\n      splitIndex: 0,\n      parent,\n      path,\n      index: flatIndex,\n      params: {},\n      payload: undefined,\n      structureContext,\n    }\n    const resolvedPane = await firstValueFrom(resolvePane(unresolvedPane, context, flatIndex))\n\n    // if the resolved pane is a document pane and the pane's ID matches then\n    // resolve the intent to the current path\n    if (resolvedPane.type === 'document' && resolvedPane.id === targetId) {\n      return [\n        {\n          panes: [\n            ...path.slice(0, path.length - 1).map((i) => [{id: i}]),\n            [{id: targetId, params: otherParams, payload}],\n          ],\n          depthIndex: path.length,\n          levelIndex,\n        },\n      ]\n    }\n\n    // NOTE: if you update this logic, please also update the similar handler in\n    // `getIntentState.ts`\n    if (\n      // if the resolve pane's `canHandleIntent` returns true, then resolve\n      resolvedPane.canHandleIntent?.(intent, params, {\n        pane: resolvedPane,\n        index: flatIndex,\n      }) ||\n      // if the pane's `canHandleIntent` did not return true, then match against\n      // this default case. we will resolve the intent if:\n      (resolvedPane.type === 'documentList' &&\n        // 1. the schema type matches (this required for the document to render)\n        resolvedPane.schemaTypeName === schemaTypeName &&\n        // 2. the filter is the default filter.\n        //\n        // NOTE: this case is to prevent false positive matches where the user\n        // has configured a more specific filter for a particular type. In that\n        // case, the user can implement their own `canHandleIntent` function\n        resolvedPane.options.filter === '_type == $type')\n    ) {\n      return [\n        {\n          panes: [\n            // map the current path to router panes\n            ...path.map((id) => [{id}]),\n            // then augment with the intents IDs and params\n            [{id: params.id, params: otherParams, payload}],\n          ],\n          depthIndex: path.length,\n          levelIndex,\n        },\n      ]\n    }\n\n    if (resolvedPane.type === 'list' && resolvedPane.child && resolvedPane.items) {\n      return (\n        await Promise.all(\n          resolvedPane.items.map((item, nextLevelIndex) => {\n            if (item.type === 'divider') return Promise.resolve([])\n\n            return traverse({\n              currentId: item._id || item.id,\n              flatIndex: flatIndex + 1,\n              intent,\n              params,\n              parent: resolvedPane,\n              path: [...path, item.id],\n              payload,\n              unresolvedPane:\n                typeof resolvedPane.child === 'function'\n                  ? memoBind(resolvedPane, 'child')\n                  : resolvedPane.child,\n              levelIndex: nextLevelIndex,\n              structureContext,\n            })\n          }),\n        )\n      ).flat()\n    }\n\n    return []\n  }\n\n  const matchingPanes = await traverse({\n    currentId: 'root',\n    flatIndex: 0,\n    levelIndex: 0,\n    intent: options.intent,\n    params: options.params,\n    parent: null,\n    path: [],\n    payload: options.payload,\n    unresolvedPane: options.rootPaneNode,\n    structureContext: options.structureContext,\n  })\n\n  const closestPaneToRoot = matchingPanes.sort((a, b) => {\n    // break ties with the level index\n    if (a.depthIndex === b.depthIndex) return a.levelIndex - b.levelIndex\n    return a.depthIndex - b.depthIndex\n  })[0]\n\n  if (closestPaneToRoot) {\n    return closestPaneToRoot.panes\n  }\n\n  return fallbackEditorPanes\n}\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {isEqual} from 'lodash'\nimport {concat, NEVER, type Observable, of as observableOf} from 'rxjs'\nimport {distinctUntilChanged, map, pairwise, scan, startWith, switchMap} from 'rxjs/operators'\n\nimport {type StructureContext} from '../structureBuilder'\nimport {\n  type DocumentPaneNode,\n  type PaneNode,\n  type PaneNodeResolver,\n  type RouterPanes,\n  type RouterPaneSibling,\n  type RouterPaneSiblingContext,\n  type UnresolvedPaneNode,\n} from '../types'\nimport {assignId} from './assignId'\nimport {\n  createPaneResolver,\n  type PaneResolver,\n  type PaneResolverMiddleware,\n} from './createPaneResolver'\nimport {memoBind} from './memoBind'\nimport {PaneResolutionError} from './PaneResolutionError'\n\n/**\n * the fallback editor child that is implicitly inserted into the structure tree\n * if the id starts with `__edit__`\n */\nconst fallbackEditorChild: PaneNodeResolver = (nodeId, context): DocumentPaneNode => {\n  const id = nodeId.replace(/^__edit__/, '')\n  const {\n    params,\n    payload,\n    structureContext: {resolveDocumentNode},\n  } = context\n  const {type, template} = params\n\n  if (!type) {\n    throw new Error(\n      `Document type for document with ID ${id} was not provided in the router params.`,\n    )\n  }\n\n  let defaultDocumentBuilder = resolveDocumentNode({schemaType: type, documentId: id}).id('editor')\n\n  if (template) {\n    defaultDocumentBuilder = defaultDocumentBuilder.initialValueTemplate(\n      template,\n      payload as {[key: string]: unknown},\n    )\n  }\n\n  return defaultDocumentBuilder.serialize() as DocumentPaneNode\n}\n\n/**\n * takes in a `RouterPaneSiblingContext` and returns a normalized string\n * representation that can be used for comparisons\n */\nfunction hashContext(context: RouterPaneSiblingContext): string {\n  return `contextHash(${JSON.stringify({\n    id: context.id,\n    parentId: parent && assignId(parent),\n    path: context.path,\n    index: context.index,\n    splitIndex: context.splitIndex,\n    serializeOptionsIndex: context.serializeOptions?.index,\n    serializeOptionsPath: context.serializeOptions?.path,\n  })})`\n}\n\n/**\n * takes in `ResolvedPaneMeta` and returns a normalized string representation\n * that can be used for comparisons\n */\nconst hashResolvedPaneMeta = (meta: ResolvedPaneMeta): string => {\n  const normalized = {\n    type: meta.type,\n    id: meta.routerPaneSibling.id,\n    params: meta.routerPaneSibling.params || {},\n    payload: meta.routerPaneSibling.payload || null,\n    flatIndex: meta.flatIndex,\n    groupIndex: meta.groupIndex,\n    siblingIndex: meta.siblingIndex,\n    path: meta.path,\n    paneNode: meta.type === 'resolvedMeta' ? assignId(meta.paneNode) : null,\n  }\n\n  return `metaHash(${JSON.stringify(normalized)})`\n}\n\n/**\n * Represents one flattened \"router pane\", including the source group and\n * sibling indexes.\n *\n * @see RouterPanes\n */\ninterface FlattenedRouterPane {\n  routerPaneSibling: RouterPaneSibling\n  flatIndex: number\n  groupIndex: number\n  siblingIndex: number\n}\n\n/**\n * The state of the accumulator used to store and manage memo cache state\n */\ninterface CacheState {\n  /**\n   * Holds the memoization results keyed by a combination of `assignId` and a\n   * context hash.\n   */\n  resolvedPaneCache: Map<string, Observable<PaneNode>>\n  /**\n   * Acts as a dictionary that stores cache keys by their flat index. This is\n   * used to clean up the cache between different branches in the pane\n   * structure.\n   *\n   * @see createResolvedPaneNodeStream look inside the `scan` where `wrapFn` is\n   * defined\n   */\n  cacheKeysByFlatIndex: Array<Set<string>>\n  /**\n   * The resulting memoized `PaneResolver` function. This function closes over\n   * the `resolvedPaneCache`.\n   */\n  resolvePane: PaneResolver\n  flattenedRouterPanes: FlattenedRouterPane[]\n}\n\nexport interface CreateResolvedPaneNodeStreamOptions {\n  /**\n   * an input stream of `RouterPanes`\n   * @see RouterPanes\n   */\n  routerPanesStream: Observable<RouterPanes>\n  /**\n   * any `UnresolvedPaneNode` (could be an observable, promise, pane resolver etc)\n   */\n  rootPaneNode: UnresolvedPaneNode\n  /** used primarily for testing */\n  initialCacheState?: CacheState\n\n  structureContext: StructureContext\n}\n\n/**\n * The result of pane resolving\n */\nexport type ResolvedPaneMeta = {\n  groupIndex: number\n  siblingIndex: number\n  flatIndex: number\n  routerPaneSibling: RouterPaneSibling\n  path: string[]\n} & ({type: 'loading'; paneNode: null} | {type: 'resolvedMeta'; paneNode: PaneNode})\n\ninterface ResolvePaneTreeOptions {\n  resolvePane: PaneResolver\n  flattenedRouterPanes: FlattenedRouterPane[]\n  unresolvedPane: UnresolvedPaneNode | undefined\n  parent: PaneNode | null\n  path: string[]\n  structureContext: StructureContext\n}\n\n/**\n * A recursive pane resolving function. Starts at one unresolved pane node and\n * continues until there is no more flattened router panes that can be used as\n * input to the unresolved panes.\n */\nfunction resolvePaneTree({\n  unresolvedPane,\n  flattenedRouterPanes,\n  parent,\n  path,\n  resolvePane,\n  structureContext,\n}: ResolvePaneTreeOptions): Observable<ResolvedPaneMeta[]> {\n  const [current, ...rest] = flattenedRouterPanes\n  const next = rest[0] as FlattenedRouterPane | undefined\n\n  const context: RouterPaneSiblingContext = {\n    id: current.routerPaneSibling.id,\n    splitIndex: current.siblingIndex,\n    parent,\n    path: [...path, current.routerPaneSibling.id],\n    index: current.flatIndex,\n    params: current.routerPaneSibling.params || {},\n    payload: current.routerPaneSibling.payload,\n    structureContext,\n  }\n\n  try {\n    return resolvePane(unresolvedPane, context, current.flatIndex).pipe(\n      // this switch map receives a resolved pane\n      switchMap((paneNode) => {\n        // we can create a `resolvedMeta` type using it\n        const resolvedPaneMeta: ResolvedPaneMeta = {\n          type: 'resolvedMeta',\n          ...current,\n          paneNode: paneNode,\n          path: context.path,\n        }\n\n        // for the other unresolved panes, we can create \"loading panes\"\n        const loadingPanes = rest.map((i, restIndex) => {\n          const loadingPanePath = [\n            ...context.path,\n            ...rest.slice(restIndex).map((_, currentIndex) => `[${i.flatIndex + currentIndex}]`),\n          ]\n\n          const loadingPane: ResolvedPaneMeta = {\n            type: 'loading',\n            path: loadingPanePath,\n            paneNode: null,\n            ...i,\n          }\n\n          return loadingPane\n        })\n\n        if (!rest.length) {\n          return observableOf([resolvedPaneMeta])\n        }\n\n        let nextStream\n\n        if (\n          // the fallback editor case\n          next?.routerPaneSibling.id.startsWith('__edit__')\n        ) {\n          nextStream = resolvePaneTree({\n            unresolvedPane: fallbackEditorChild,\n            flattenedRouterPanes: rest,\n            parent,\n            path: context.path,\n            resolvePane,\n            structureContext,\n          })\n        } else if (current.groupIndex === next?.groupIndex) {\n          // if the next flattened router pane has the same group index as the\n          // current flattened router pane, then the next flattened router pane\n          // belongs to the same group (i.e. it is a split pane)\n          nextStream = resolvePaneTree({\n            unresolvedPane,\n            flattenedRouterPanes: rest,\n            parent,\n            path,\n            resolvePane,\n            structureContext,\n          })\n        } else {\n          // normal children resolving\n          nextStream = resolvePaneTree({\n            unresolvedPane:\n              typeof paneNode.child === 'function'\n                ? (memoBind(paneNode, 'child') as PaneNodeResolver)\n                : paneNode.child,\n            flattenedRouterPanes: rest,\n            parent: paneNode,\n            path: context.path,\n            resolvePane,\n            structureContext,\n          })\n        }\n\n        return concat(\n          // we emit the loading panes first in a concat (this emits immediately)\n          observableOf([resolvedPaneMeta, ...loadingPanes]),\n          // then whenever the next stream is done, the results will be combined.\n          nextStream.pipe(map((nextResolvedPanes) => [resolvedPaneMeta, ...nextResolvedPanes])),\n        )\n      }),\n    )\n  } catch (e) {\n    if (e instanceof PaneResolutionError) {\n      if (e.context) {\n        console.warn(\n          `Pane resolution error at index ${e.context.index}${\n            e.context.splitIndex > 0 ? ` for split pane index ${e.context.splitIndex}` : ''\n          }: ${e.message}${e.helpId ? ` - see ${generateHelpUrl(e.helpId)}` : ''}`,\n          e,\n        )\n      }\n\n      if (e.helpId === 'structure-item-returned-no-child') {\n        // returning an observable of an empty array will remove loading panes\n        // note: this one intentionally does not throw\n        return observableOf([])\n      }\n    }\n\n    throw e\n  }\n}\n\n/**\n * Takes in a stream of `RouterPanes` and an unresolved root pane and returns\n * a stream of `ResolvedPaneMeta`\n */\nexport function createResolvedPaneNodeStream({\n  routerPanesStream,\n  rootPaneNode,\n  initialCacheState = {\n    cacheKeysByFlatIndex: [],\n    flattenedRouterPanes: [],\n    resolvedPaneCache: new Map(),\n    resolvePane: () => NEVER,\n  },\n  structureContext,\n}: CreateResolvedPaneNodeStreamOptions): Observable<ResolvedPaneMeta[]> {\n  const resolvedPanes$ = routerPanesStream.pipe(\n    // add in implicit \"root\" router pane\n    map((rawRouterPanes) => [[{id: 'root'}], ...rawRouterPanes]),\n    // create flattened router panes\n    map((routerPanes) => {\n      const flattenedRouterPanes: FlattenedRouterPane[] = routerPanes\n        .flatMap((routerPaneGroup, groupIndex) =>\n          routerPaneGroup.map((routerPaneSibling, siblingIndex) => ({\n            routerPaneSibling,\n            groupIndex,\n            siblingIndex,\n          })),\n        )\n        // add in the flat index\n        .map((i, index) => ({...i, flatIndex: index}))\n\n      return flattenedRouterPanes\n    }),\n    // calculate a \"diffIndex\" used for clearing the memo cache\n    startWith([] as FlattenedRouterPane[]),\n    pairwise(),\n    map(([prev, curr]) => {\n      for (let i = 0; i < curr.length; i++) {\n        const prevValue = prev[i]\n        const currValue = curr[i]\n\n        if (!isEqual(prevValue, currValue)) {\n          return {\n            flattenedRouterPanes: curr,\n            diffIndex: i,\n          }\n        }\n      }\n\n      return {\n        flattenedRouterPanes: curr,\n        diffIndex: curr.length,\n      }\n    }),\n    // create the memoized `resolvePane` function and manage the memo cache\n    scan((acc, next) => {\n      const {cacheKeysByFlatIndex, resolvedPaneCache} = acc\n      const {flattenedRouterPanes, diffIndex} = next\n\n      // use the `cacheKeysByFlatIndex` like a dictionary to find cache keys to\n      // and cache keys to delete\n      const beforeDiffIndex = cacheKeysByFlatIndex.slice(0, diffIndex + 1)\n      const afterDiffIndex = cacheKeysByFlatIndex.slice(diffIndex + 1)\n\n      const keysToKeep = new Set(beforeDiffIndex.flatMap((keySet) => Array.from(keySet)))\n      const keysToDelete = afterDiffIndex\n        .flatMap((keySet) => Array.from(keySet))\n        .filter((key) => !keysToKeep.has(key))\n\n      for (const key of keysToDelete) {\n        resolvedPaneCache.delete(key)\n      }\n\n      // create a memoizing pane resolver middleware that utilizes the cache\n      // maintained above. this keeps the cache from growing indefinitely\n      const memoize: PaneResolverMiddleware = (nextFn) => (unresolvedPane, context, flatIndex) => {\n        const key = unresolvedPane && `${assignId(unresolvedPane)}-${hashContext(context)}`\n        const cachedResolvedPane = key && resolvedPaneCache.get(key)\n        if (cachedResolvedPane) return cachedResolvedPane\n\n        const result = nextFn(unresolvedPane, context, flatIndex)\n        if (!key) return result\n\n        const cacheKeySet = cacheKeysByFlatIndex[flatIndex] || new Set()\n        cacheKeySet.add(key)\n        cacheKeysByFlatIndex[flatIndex] = cacheKeySet\n        resolvedPaneCache.set(key, result)\n        return result\n      }\n\n      return {\n        flattenedRouterPanes,\n        cacheKeysByFlatIndex,\n        resolvedPaneCache,\n        resolvePane: createPaneResolver(memoize),\n      }\n    }, initialCacheState),\n    // run the memoized, recursive resolving\n    switchMap(({flattenedRouterPanes, resolvePane}) =>\n      resolvePaneTree({\n        unresolvedPane: rootPaneNode,\n        flattenedRouterPanes,\n        parent: null,\n        path: [],\n        resolvePane,\n        structureContext,\n      }),\n    ),\n  )\n\n  // after we've created a stream of `ResolvedPaneMeta[]`, we need to clean up\n  // the results to remove unwanted loading panes and prevent unnecessary\n  // emissions\n  return resolvedPanes$.pipe(\n    // this diffs the previous emission with the current one. if there is a new\n    // loading pane at the same position where a previous pane already had a\n    // resolved value (looking at the IDs to compare), then return the previous\n    // pane instead of the loading pane\n    scan(\n      (prev, next) =>\n        next.map((nextPane, index) => {\n          const prevPane = prev[index] as ResolvedPaneMeta | undefined\n          if (!prevPane) return nextPane\n          if (nextPane.type !== 'loading') return nextPane\n\n          if (prevPane.routerPaneSibling.id === nextPane.routerPaneSibling.id) {\n            return prevPane\n          }\n          return nextPane\n        }),\n      [] as ResolvedPaneMeta[],\n    ),\n    // this prevents duplicate emissions\n    distinctUntilChanged((prev, next) => {\n      if (prev.length !== next.length) return false\n\n      for (let i = 0; i < next.length; i++) {\n        const prevValue = prev[i]\n        const nextValue = next[i]\n        if (hashResolvedPaneMeta(prevValue) !== hashResolvedPaneMeta(nextValue)) {\n          return false\n        }\n      }\n\n      return true\n    }),\n  )\n}\n","import {useEffect, useMemo, useState} from 'react'\nimport {ReplaySubject} from 'rxjs'\nimport {map} from 'rxjs/operators'\nimport {type RouterState, useRouter} from 'sanity/router'\n\nimport {LOADING_PANE} from '../constants'\nimport {type PaneNode, type RouterPaneGroup, type RouterPanes} from '../types'\nimport {useStructureTool} from '../useStructureTool'\nimport {createResolvedPaneNodeStream} from './createResolvedPaneNodeStream'\n\ninterface PaneData {\n  active: boolean\n  childItemId: string | null\n  groupIndex: number\n  index: number\n  itemId: string\n  key: string\n  pane: PaneNode | typeof LOADING_PANE\n  params: Record<string, string | undefined> & {perspective?: string}\n  path: string\n  payload: unknown\n  selected: boolean\n  siblingIndex: number\n}\n\nexport interface Panes {\n  paneDataItems: PaneData[]\n  routerPanes: RouterPanes\n  resolvedPanes: (PaneNode | typeof LOADING_PANE)[]\n}\n\nfunction useRouterPanesStream() {\n  const [routerStateSubject] = useState(() => new ReplaySubject<RouterState>(1))\n  const routerPanes$ = useMemo(\n    () =>\n      routerStateSubject\n        .asObservable()\n        .pipe(map((_routerState) => (_routerState?.panes || []) as RouterPanes)),\n    [routerStateSubject],\n  )\n  const {state: routerState} = useRouter()\n  useEffect(() => {\n    routerStateSubject.next(routerState)\n  }, [routerState, routerStateSubject])\n\n  return routerPanes$\n}\n\nexport function useResolvedPanes(): Panes {\n  // used to propagate errors from async effect. throwing inside of the render\n  // will bubble the error to react where it can be picked up by standard error\n  // boundaries\n  const [error, setError] = useState<unknown>()\n  if (error) throw error\n\n  const {structureContext, rootPaneNode} = useStructureTool()\n\n  const [data, setData] = useState<Panes>({\n    paneDataItems: [],\n    resolvedPanes: [],\n    routerPanes: [],\n  })\n\n  const routerPanesStream = useRouterPanesStream()\n\n  useEffect(() => {\n    const resolvedPanes$ = createResolvedPaneNodeStream({\n      rootPaneNode,\n      routerPanesStream,\n      structureContext,\n    }).pipe(\n      map((resolvedPanes) => {\n        const routerPanes = resolvedPanes.reduce<RouterPanes>((acc, next) => {\n          const currentGroup = acc[next.groupIndex] || []\n          currentGroup[next.siblingIndex] = next.routerPaneSibling\n          acc[next.groupIndex] = currentGroup\n          return acc\n        }, [])\n\n        const groupsLen = routerPanes.length\n\n        const paneDataItems = resolvedPanes.map((pane) => {\n          const {groupIndex, flatIndex, siblingIndex, routerPaneSibling, path} = pane\n          const itemId = routerPaneSibling.id\n          const nextGroup = routerPanes[groupIndex + 1] as RouterPaneGroup | undefined\n\n          const paneDataItem: PaneData = {\n            active: groupIndex === groupsLen - 2,\n            childItemId: nextGroup?.[0].id ?? null,\n            index: flatIndex,\n            itemId: routerPaneSibling.id,\n            groupIndex,\n            key: `${\n              pane.type === 'loading' ? 'unknown' : pane.paneNode.id\n            }-${itemId}-${siblingIndex}`,\n            pane: pane.type === 'loading' ? LOADING_PANE : pane.paneNode,\n            params: routerPaneSibling.params || {},\n            path: path.join(';'),\n            payload: routerPaneSibling.payload,\n            selected: flatIndex === resolvedPanes.length - 1,\n            siblingIndex,\n          }\n\n          return paneDataItem\n        })\n\n        return {\n          paneDataItems,\n          routerPanes,\n          resolvedPanes: paneDataItems.map((pane) => pane.pane),\n        }\n      }),\n    )\n\n    const subscription = resolvedPanes$.subscribe({\n      next: (result) => setData(result),\n      error: (e) => setError(e),\n    })\n\n    return () => subscription.unsubscribe()\n  }, [rootPaneNode, routerPanesStream, structureContext])\n\n  return data\n}\n","import {uuid} from '@sanity/uuid'\nimport {firstValueFrom, type Observable} from 'rxjs'\nimport {type DocumentStore, getPublishedId} from 'sanity'\n\nimport {PaneResolutionError} from '../../../structureResolvers'\n\nexport function removeDraftPrefix(documentId: string): string {\n  const publishedId = getPublishedId(documentId)\n\n  if (publishedId !== documentId) {\n    console.warn(\n      'Removed unexpected draft id in document link: All links to documents should have the ' +\n        '`drafts.`-prefix removed and something appears to have made an intent link to `%s`',\n      documentId,\n    )\n  }\n\n  return publishedId\n}\n\nexport async function ensureDocumentIdAndType(\n  documentStore: DocumentStore,\n  id: string | undefined,\n  type: string | undefined,\n): Promise<{id: string; type: string}> {\n  if (id && type) return {id, type}\n  if (!id && type) return {id: uuid(), type}\n  if (id && !type) {\n    const resolvedType = await firstValueFrom(\n      documentStore.resolveTypeForDocument(id) as Observable<string>,\n    )\n\n    return {id, type: resolvedType}\n  }\n\n  throw new PaneResolutionError({\n    message: 'Neither document `id` or `type` was provided when trying to resolve intent.',\n  })\n}\n","import {memo, useCallback, useEffect, useState} from 'react'\nimport {isRecord, useDocumentStore} from 'sanity'\nimport {useRouter, useRouterState} from 'sanity/router'\n\nimport {resolveIntent} from '../../../structureResolvers'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {ensureDocumentIdAndType} from './utils'\n\nconst EMPTY_RECORD: Record<string, unknown> = {}\n\n/**\n * A component that receives an intent from props and redirects to the resolved\n * intent location (while showing a loading spinner during the process)\n */\nexport const IntentResolver = memo(function IntentResolver() {\n  const {navigate} = useRouter()\n  const maybeIntent = useRouterState(\n    useCallback((routerState) => {\n      const intentName = typeof routerState.intent === 'string' ? routerState.intent : undefined\n      return intentName\n        ? {\n            intent: intentName,\n            params: isRecord(routerState.params) ? routerState.params : EMPTY_RECORD,\n            payload: routerState.payload,\n          }\n        : undefined\n    }, []),\n  )\n  const {rootPaneNode, structureContext} = useStructureTool()\n  const documentStore = useDocumentStore()\n  const [error, setError] = useState<unknown>(null)\n\n  // this re-throws errors so that parent ErrorBoundary's can handle them properly\n  if (error) throw error\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    if (maybeIntent) {\n      const {intent, params, payload} = maybeIntent\n\n      let cancelled = false\n      async function effect() {\n        const {id, type} = await ensureDocumentIdAndType(\n          documentStore,\n          typeof params.id === 'string' ? params.id : undefined,\n          typeof params.type === 'string' ? params.type : undefined,\n        )\n\n        if (cancelled) return\n\n        const panes = await resolveIntent({\n          intent,\n          params: {...params, id, type},\n          payload,\n          rootPaneNode,\n          structureContext,\n        })\n\n        if (cancelled) return\n\n        navigate({panes}, {replace: true})\n      }\n\n      effect().catch(setError)\n\n      return () => {\n        cancelled = true\n      }\n    }\n  }, [documentStore, maybeIntent, navigate, rootPaneNode, structureContext])\n\n  return null\n})\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {SyncIcon} from '@sanity/icons'\nimport {Box, Card, Code, Container, Heading, Stack, Text} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {SerializeError} from '../../structureBuilder'\nimport {PaneResolutionError} from '../../structureResolvers'\n\nconst PathSegment = styled.span`\n  &:not(:last-child)::after {\n    content: ' ➝ ';\n    opacity: 0.5;\n  }\n`\n\nfunction formatStack(stack: string) {\n  return (\n    stack\n      // Prettify builder functions\n      .replace(/\\(\\.\\.\\.\\)\\./g, '(...)\\n  .')\n      // Remove webpack cruft from function names\n      .replace(/__WEBPACK_IMPORTED_MODULE_\\d+_+/g, '')\n      // Remove default export postfix from function names\n      .replace(/___default\\./g, '.')\n      // Replace full host path, leave only path to JS-file\n      .replace(new RegExp(` \\\\(https?:\\\\/\\\\/${window.location.host}`, 'g'), ' (')\n  )\n}\n\ninterface StructureErrorProps {\n  error: unknown\n}\n\nexport function StructureError({error}: StructureErrorProps) {\n  if (!(error instanceof PaneResolutionError)) {\n    throw error\n  }\n  const {cause} = error\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  // Serialize errors are well-formatted and should be readable, in these cases a stack trace is\n  // usually not helpful. Build errors in dev (with HMR) usually also contains a bunch of garbage\n  // instead of an actual error message, so make sure we show the message in these cases as well\n  const stack = cause?.stack || error.stack\n  const showStack =\n    stack && !(cause instanceof SerializeError) && !error.message.includes('Module build failed:')\n\n  const path = cause instanceof SerializeError ? cause.path : []\n  const helpId = (cause instanceof SerializeError && cause.helpId) || error.helpId\n\n  const handleReload = useCallback(() => {\n    window.location.reload()\n  }, [])\n\n  return (\n    <Card height=\"fill\" overflow=\"auto\" padding={4} sizing=\"border\" tone=\"critical\">\n      <Container>\n        <Heading as=\"h2\">{t('structure-error.header.text')}</Heading>\n\n        <Card marginTop={4} padding={4} radius={2} overflow=\"auto\" shadow={1} tone=\"inherit\">\n          {path.length > 0 && (\n            <Stack space={2}>\n              <Text size={1} weight=\"medium\">\n                {t('structure-error.structure-path.label')}\n              </Text>\n              <Code>\n                {/* TODO: it seems like the path is off by one and includes */}\n                {/* `root` twice  */}\n                {path.slice(1).map((segment, i) => (\n                  <PathSegment key={`${segment}-${i}`}>{segment}</PathSegment>\n                ))}\n              </Code>\n            </Stack>\n          )}\n\n          <Stack marginTop={4} space={2}>\n            <Text size={1} weight=\"medium\">\n              {t('structure-error.error.label')}\n            </Text>\n            <Code>{showStack ? formatStack(stack) : error.message}</Code>\n          </Stack>\n\n          {helpId && (\n            <Box marginTop={4}>\n              <Text>\n                <a href={generateHelpUrl(helpId)} rel=\"noopener noreferrer\" target=\"_blank\">\n                  {t('structure-error.docs-link.text')}\n                </a>\n              </Text>\n            </Box>\n          )}\n\n          <Box marginTop={4}>\n            <Button\n              text={t('structure-error.reload-button.text')}\n              icon={SyncIcon}\n              tone=\"primary\"\n              onClick={handleReload}\n            />\n          </Box>\n        </Card>\n      </Container>\n    </Card>\n  )\n}\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {Box, Card, Container, Flex, Stack, Text} from '@sanity/ui'\nimport {useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../i18n'\n\nexport function NoDocumentTypesScreen() {\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Card height=\"fill\">\n      <Flex align=\"center\" height=\"fill\" justify=\"center\" padding={4} sizing=\"border\">\n        <Container width={0}>\n          <Card padding={4} radius={2} shadow={1} tone=\"caution\">\n            <Flex>\n              <Box>\n                <Text size={1}>\n                  <WarningOutlineIcon />\n                </Text>\n              </Box>\n              <Stack flex={1} marginLeft={3} space={3}>\n                <Text as=\"h1\" size={1} weight=\"medium\">\n                  {t('no-document-types-screen.title')}\n                </Text>\n                <Text as=\"p\" muted size={1}>\n                  {t('no-document-types-screen.subtitle')}\n                </Text>\n                <Text as=\"p\" muted size={1}>\n                  <a\n                    href=\"https://www.sanity.io/docs/create-a-schema-and-configure-sanity-studio\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    {t('no-document-types-screen.link-text')}\n                  </a>\n                </Text>\n              </Stack>\n            </Flex>\n          </Card>\n        </Container>\n      </Flex>\n    </Card>\n  )\n}\n","import {type ObjectSchemaType} from '@sanity/types'\nimport {useEffect} from 'react'\nimport {\n  unstable_useValuePreview as useValuePreview,\n  useEditState,\n  usePerspective,\n  useSchema,\n  useTranslation,\n} from 'sanity'\n\nimport {LOADING_PANE} from '../../constants'\nimport {useDocumentLastRev} from '../../hooks/useDocumentLastRev'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type Panes} from '../../structureResolvers'\nimport {type DocumentPaneNode} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\n\ninterface StructureTitleProps {\n  resolvedPanes: Panes['resolvedPanes']\n}\n\n// TODO: Fix state jank when editing different versions inside panes.\nconst DocumentTitle = (props: {documentId: string; documentType: string}) => {\n  const {documentId, documentType} = props\n  const {selectedReleaseId} = usePerspective()\n\n  const editState = useEditState(documentId, documentType, 'default', selectedReleaseId)\n  const schema = useSchema()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const isNewDocument = !editState?.published && !editState?.draft\n  const documentValue = editState?.version || editState?.draft || editState?.published\n  const schemaType = schema.get(documentType) as ObjectSchemaType | undefined\n\n  const {value, isLoading: previewValueIsLoading} = useValuePreview({\n    enabled: !!documentValue,\n    schemaType,\n    value: documentValue,\n  })\n\n  const {lastRevisionDocument} = useDocumentLastRev(documentId, documentType)\n  const isDeleted = lastRevisionDocument && !documentValue\n\n  // if the document is deleted, we don't want to show the title\n  const documentTitle = isDeleted\n    ? ''\n    : isNewDocument\n      ? t('browser-document-title.new-document', {\n          schemaType: schemaType?.title || schemaType?.name,\n        })\n      : value?.title || t('browser-document-title.untitled-document')\n\n  const settled = editState.ready && !previewValueIsLoading\n  const newTitle = useConstructDocumentTitle(documentTitle)\n  useEffect(() => {\n    if (!settled) return\n    // Set the title as the document title\n    document.title = newTitle\n  }, [documentTitle, settled, newTitle])\n\n  return null\n}\n\nconst PassthroughTitle = (props: {title?: string}) => {\n  const {title} = props\n  const newTitle = useConstructDocumentTitle(title)\n  useEffect(() => {\n    // Set the title as the document title\n    document.title = newTitle\n  }, [newTitle, title])\n  return null\n}\n\nexport const StructureTitle = (props: StructureTitleProps) => {\n  const {resolvedPanes} = props\n\n  if (!resolvedPanes?.length) return null\n\n  const lastPane = resolvedPanes[resolvedPanes.length - 1]\n\n  // If the last pane is loading, display the structure tool title only\n  if (isLoadingPane(lastPane)) {\n    return <PassthroughTitle />\n  }\n\n  // If the last pane is a document\n  if (isDocumentPane(lastPane)) {\n    // Passthrough the document pane's title, which may be defined in structure builder\n    if (lastPane?.title) {\n      return <PassthroughTitle title={lastPane.title} />\n    }\n\n    // Otherwise, display a `document.title` containing the resolved Sanity document title\n    return <DocumentTitle documentId={lastPane.options.id} documentType={lastPane.options.type} />\n  }\n\n  // Otherwise, display the last pane's title (if present)\n  return <PassthroughTitle title={lastPane?.title} />\n}\n\n/**\n * Construct a pipe delimited title containing `activeTitle` (if applicable) and the base structure title.\n *\n * @param activeTitle - Title of the first segment\n *\n * @returns A pipe delimited title in the format `${activeTitle} | %BASE_STRUCTURE_TITLE%`\n * or simply `%BASE_STRUCTURE_TITLE` if `activeTitle` is undefined.\n */\nfunction useConstructDocumentTitle(activeTitle?: string) {\n  const structureToolBaseTitle = useStructureTool().structureContext.title\n  return [activeTitle, structureToolBaseTitle].filter((title) => title).join(' | ')\n}\n\n// Type guards\nfunction isDocumentPane(pane: Panes['resolvedPanes'][number]): pane is DocumentPaneNode {\n  return pane !== LOADING_PANE && pane.type === 'document'\n}\n\nfunction isLoadingPane(pane: Panes['resolvedPanes'][number]): pane is typeof LOADING_PANE {\n  return pane === LOADING_PANE\n}\n","import {PortalProvider, useTheme, useToast} from '@sanity/ui'\nimport {isHotkey} from 'is-hotkey-esm'\nimport {Fragment, memo, useCallback, useEffect, useState} from 'react'\nimport {_isCustomDocumentTypeDefinition, useSchema} from 'sanity'\nimport {useRouterState} from 'sanity/router'\nimport {styled} from 'styled-components'\n\nimport {LOADING_PANE} from '../../constants'\nimport {LoadingPane, StructureToolPane} from '../../panes'\nimport {useResolvedPanes} from '../../structureResolvers'\nimport {type PaneNode} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {PaneLayout} from '../pane'\nimport {NoDocumentTypesScreen} from './NoDocumentTypesScreen'\nimport {StructureTitle} from './StructureTitle'\n\ninterface StructureToolProps {\n  onPaneChange: (panes: Array<PaneNode | typeof LOADING_PANE>) => void\n}\n\nconst StyledPaneLayout = styled(PaneLayout)`\n  min-height: 100%;\n  min-width: 320px;\n`\n\nconst isSaveHotkey = isHotkey('mod+s')\n\n/**\n * @internal\n */\nexport const StructureTool = memo(function StructureTool({onPaneChange}: StructureToolProps) {\n  const {push: pushToast} = useToast()\n  const schema = useSchema()\n  const {layoutCollapsed, setLayoutCollapsed} = useStructureTool()\n  const {paneDataItems, resolvedPanes} = useResolvedPanes()\n  // Intent resolving is processed by the sibling `<IntentResolver />` but it doesn't have a UI for indicating progress.\n  // We handle that here, so if there are only 1 pane (the root structure), and there's an intent state in the router, we need to show a placeholder LoadingPane until\n  // the structure is resolved and we know what panes to load/display\n  const isResolvingIntent = useRouterState(\n    useCallback((routerState) => typeof routerState.intent === 'string', []),\n  )\n  const {\n    sanity: {media},\n  } = useTheme()\n\n  const [portalElement, setPortalElement] = useState<HTMLDivElement | null>(null)\n\n  const handleRootCollapse = useCallback(() => setLayoutCollapsed(true), [setLayoutCollapsed])\n  const handleRootExpand = useCallback(() => setLayoutCollapsed(false), [setLayoutCollapsed])\n\n  useEffect(() => {\n    // we check for length before emitting here to skip the initial empty array\n    // state from the `useResolvedPanes` hook. there should always be a root\n    // pane emitted on subsequent emissions\n    if (resolvedPanes.length) {\n      onPaneChange(resolvedPanes)\n    }\n  }, [onPaneChange, resolvedPanes])\n\n  useEffect(() => {\n    const handleGlobalKeyDown = (event: KeyboardEvent) => {\n      // Prevent `Cmd+S`\n      if (isSaveHotkey(event)) {\n        event.preventDefault()\n\n        pushToast({\n          closable: true,\n          id: 'auto-save-message',\n          status: 'info',\n          title: 'Your work is automatically saved!',\n          duration: 4000,\n        })\n      }\n    }\n\n    window.addEventListener('keydown', handleGlobalKeyDown)\n    return () => window.removeEventListener('keydown', handleGlobalKeyDown)\n  }, [pushToast])\n\n  const hasDefinedDocumentTypes = schema._original?.types.some(_isCustomDocumentTypeDefinition)\n\n  if (!hasDefinedDocumentTypes) {\n    return <NoDocumentTypesScreen />\n  }\n\n  return (\n    <PortalProvider element={portalElement || null}>\n      <StyledPaneLayout\n        flex={1}\n        height={layoutCollapsed ? undefined : 'fill'}\n        minWidth={media[1]}\n        onCollapse={handleRootCollapse}\n        onExpand={handleRootExpand}\n      >\n        {paneDataItems.map(\n          ({\n            active,\n            childItemId,\n            groupIndex,\n            itemId,\n            key: paneKey,\n            pane,\n            index: paneIndex,\n            params: paneParams,\n            path,\n            payload,\n            siblingIndex,\n            selected,\n          }) => (\n            <Fragment key={`${pane === LOADING_PANE ? 'loading' : pane.type}-${paneIndex}`}>\n              {pane === LOADING_PANE ? (\n                <LoadingPane paneKey={paneKey} path={path} selected={selected} />\n              ) : (\n                <StructureToolPane\n                  active={active}\n                  groupIndex={groupIndex}\n                  index={paneIndex}\n                  pane={pane}\n                  childItemId={childItemId}\n                  itemId={itemId}\n                  paneKey={paneKey}\n                  params={paneParams}\n                  payload={payload}\n                  path={path}\n                  selected={selected}\n                  siblingIndex={siblingIndex}\n                />\n              )}\n            </Fragment>\n          ),\n        )}\n        {/* If there's just 1 pane (the root), or less, and we're resolving an intent then it's necessary to show */}\n        {/* a loading indicator as the intent resolving is async, could take a while and can also be interrupted/redirected */}\n        {paneDataItems.length <= 1 && isResolvingIntent && (\n          <LoadingPane paneKey=\"intent-resolver\" />\n        )}\n      </StyledPaneLayout>\n      <StructureTitle resolvedPanes={resolvedPanes} />\n      <div data-portal=\"\" ref={setPortalElement} />\n    </PortalProvider>\n  )\n})\n","import {useEffect, useState} from 'react'\nimport {SourceProvider, type Tool, useWorkspace} from 'sanity'\n\nimport {ErrorBoundary} from '../../../ui-components/errorBoundary'\nimport {setActivePanes} from '../../getIntentState'\nimport {StructureToolProvider} from '../../StructureToolProvider'\nimport {type StructureToolOptions} from '../../types'\nimport {IntentResolver} from './intentResolver'\nimport {StructureError} from './StructureError'\nimport {StructureTool} from './StructureTool'\n\ninterface StructureToolBoundaryProps {\n  tool: Tool<StructureToolOptions>\n}\n\nexport function StructureToolBoundary({tool: {options}}: StructureToolBoundaryProps) {\n  const {unstable_sources: sources} = useWorkspace()\n  const [firstSource] = sources\n  const {source, defaultDocumentNode, structure} = options || {}\n\n  // Set active panes to blank on mount and unmount\n  useEffect(() => {\n    setActivePanes([])\n    return () => setActivePanes([])\n  }, [])\n\n  const [{error}, setError] = useState<{error: unknown}>({error: null})\n\n  // this re-throws if the error it catches is not a PaneResolutionError\n  if (error) return <StructureError error={error} />\n\n  return (\n    <ErrorBoundary onCatch={setError}>\n      <SourceProvider name={source || firstSource.name}>\n        <StructureToolProvider defaultDocumentNode={defaultDocumentNode} structure={structure}>\n          <StructureTool onPaneChange={setActivePanes} />\n          <IntentResolver />\n        </StructureToolProvider>\n      </SourceProvider>\n    </ErrorBoundary>\n  )\n}\n"],"names":["PaneResolutionError","Error","constructor","message","context","helpId","cause","name","randomIdCache","WeakMap","assignId","obj","cachedValue","get","id","nanoid","set","isPromise","thing","then","isSerializable","isRecord","serialize","rethrowWithPaneResolutionErrors","next","unresolvedPane","flatIndex","e","wrapWithPublishReplay","args","pipe","publishReplay","refCount","createPaneResolver","middleware","resolvePane","isObservable","from","switchMap","result","observableOf","bindCache","memoBind","methodKey","boundMethods","Map","bound","method","bind","resolveIntent","options","resolvedPaneCache","nextFn","key","path","join","cachedResolvedPane","fallbackEditorPanes","params","omit","type","payload","traverse","currentId","intent","parent","levelIndex","structureContext","targetId","schemaTypeName","otherParams","resolvedPane","firstValueFrom","splitIndex","index","undefined","panes","slice","length","map","i","depthIndex","canHandleIntent","pane","filter","child","items","Promise","all","item","nextLevelIndex","resolve","_id","flat","closestPaneToRoot","rootPaneNode","sort","a","b","fallbackEditorChild","nodeId","replace","resolveDocumentNode","template","defaultDocumentBuilder","schemaType","documentId","initialValueTemplate","hashContext","JSON","stringify","parentId","serializeOptionsIndex","serializeOptions","serializeOptionsPath","hashResolvedPaneMeta","meta","normalized","routerPaneSibling","groupIndex","siblingIndex","paneNode","resolvePaneTree","flattenedRouterPanes","current","rest","resolvedPaneMeta","loadingPanes","restIndex","_","currentIndex","nextStream","startsWith","concat","nextResolvedPanes","console","warn","generateHelpUrl","createResolvedPaneNodeStream","routerPanesStream","initialCacheState","cacheKeysByFlatIndex","NEVER","rawRouterPanes","routerPanes","flatMap","routerPaneGroup","startWith","pairwise","prev","curr","prevValue","currValue","isEqual","diffIndex","scan","acc","beforeDiffIndex","afterDiffIndex","keysToKeep","Set","keySet","Array","keysToDelete","has","delete","cacheKeySet","add","nextPane","prevPane","distinctUntilChanged","nextValue","useRouterPanesStream","$","_c","routerStateSubject","useState","_temp","t0","asObservable","_temp2","routerPanes$","state","routerState","useRouter","t1","t2","useEffect","_routerState","ReplaySubject","useResolvedPanes","error","setError","useStructureTool","Symbol","for","paneDataItems","resolvedPanes","data","setData","subscription","_temp5","subscribe","unsubscribe","reduce","_temp3","groupsLen","itemId","nextGroup","active","childItemId","LOADING_PANE","selected","_temp4","pane_0","currentGroup","ensureDocumentIdAndType","documentStore","uuid","resolvedType","resolveTypeForDocument","EMPTY_RECORD","IntentResolver","memo","navigate","maybeIntent","useRouterState","useDocumentStore","cancelled","effect","catch","intentName","PathSegment","styled","span","formatStack","stack","RegExp","window","location","host","StructureError","t","useTranslation","structureLocaleNamespace","SerializeError","includes","showStack","T0","T1","T2","handleReload","t10","t11","t12","t13","t14","t3","t4","t5","t6","t7","t8","t9","Card","Container","t15","t16","t17","t18","t19","t20","t21","t22","SyncIcon","t23","t24","t25","segment","reload","NoDocumentTypesScreen","DocumentTitle","props","documentType","selectedReleaseId","usePerspective","editState","useEditState","schema","useSchema","isNewDocument","published","draft","documentValue","version","value","isLoading","previewValueIsLoading","useValuePreview","enabled","lastRevisionDocument","useDocumentLastRev","documentTitle","title","settled","ready","newTitle","useConstructDocumentTitle","document","PassthroughTitle","StructureTitle","lastPane","isLoadingPane","isDocumentPane","activeTitle","structureToolBaseTitle","StyledPaneLayout","PaneLayout","isSaveHotkey","isHotkey","StructureTool","onPaneChange","push","pushToast","useToast","layoutCollapsed","setLayoutCollapsed","isResolvingIntent","sanity","useTheme","media","portalElement","setPortalElement","handleRootCollapse","handleRootExpand","handleGlobalKeyDown","event","preventDefault","closable","status","duration","addEventListener","removeEventListener","_original","types","some","_isCustomDocumentTypeDefinition","paneKey","paneIndex","paneParams","StructureToolBoundary","tool","unstable_sources","sources","useWorkspace","firstSource","source","defaultDocumentNode","structure","setActivePanes"],"mappings":"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"}